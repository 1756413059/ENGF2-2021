[Music]
welcome back everybody
so in this video i'm going to talk just
a little bit about
algorithms now what exactly is an
algorithm
an algorithm is a sequence of steps
that you can take that lead to a
solution of
typically a computational problem and
whether you know it or not you're
already familiar with quite a number of
algorithms from maths
you know for example how to perform long
multiplication and long division with a
pencil and paper
that's an algorithm you know how to find
the roots of a quadratic equation of the
form
uh ax squared plus bx plus c equals zero
that's an algorithm you know how to
expand brackets
and things like that those are all
algorithms that you would be used to
applying from maths
now beyond math we find algorithms all
sorts of places in the wider world
in form of information algorithms that
solve
more interesting tasks like maybe
rendering a
3d image in a computer game or
encryption
of network communications or building
interactive social networks
or programming a car to drive
autonomously
so those are all examples of much more
complicated algorithms than the ones
you're probably used to
now today we're just going to look at
one
very simple algorithm and so the problem
that we have today
is one that you're probably pretty
familiar with
a building has a lift now inside the
lift
there are buttons to choose the floors
and outside the lift
there are buttons to call the lift
how should the lift choose which floor
to go to next
so that's the algorithm that we're going
to discuss how does the lift choose
which floor to move to next
given that people press buttons inside
the lift people press buttons outside
the lift
what's the what's the right algorithm
that the lift should use for this
okay so we find ourselves in the
interesting position of being chief lift
designer for the brand new ucl lift
company
and well one of the things we have to do
is to figure out what algorithm should
be used
now generally speaking it's probably a
good idea to start fairly simple
try something out and see what goes
wrong pretty reasonable strategy
so we make the observation that it takes
longer to go between floors that are
further apart
than between floors that are close
together and so that gives us an idea
a sensible optimization type algorithm
would be
to simply go to the floor that's the
nearest one selected to where the lift
currently is
that seems like a good algorithm to
start with so
we sit down and we program up our lift
algorithm it's not a very complicated
algorithm to use
and we deploy it and we wait to see what
happens
now after a little while we get a bug
report
hmm that's probably
not what we intended so we need to
figure out what went wrong
so after a little while we code up a
lift simulator
and we see so what actually happened
when we run this algorithm
and this is what we find
okay so what happened is that the first
people to arrive all wanted to go to
floors three and four
which is fine shouldn't be a problem
with that but
right after that somebody arrived on
floor one
and so floor one was the the closest
floor so the lift decided to go to floor
one
now the person who arrived at floor one
wants to go to floor four
but the lift is full so they can't get
in
so the lift door shut and the lift
departs again and goes to floor
two which is the nearest floor that's
selected now
again the lift is full so the person on
floor two who wants to go to floor one
can't get in
so the lift door's shut and they go back
to floor one because that's the nearest
floor that's still selected
and so the lift basically keeps going
backwards and forwards between floor one
and floor two because those floors are
always selected by the people waiting
there
and the poor people who are in the lift
never get where they're going
and eventually they starve to death so
that algorithm has a little bit of a bug
doesn't it um
the simplest algorithm clearly doesn't
work
now it's also pretty obvious what a
reasonable solution to this would be
the problem at the moment is the lift is
not paying attention
to what people in the lift say over what
people outside the left say and so it
never gets into their destination
so there's a pretty simple alternative
algorithm we can try here
so what we do is we'll go to the nearest
floor that's selected by people that are
in the lift
and only if nobody in the lift has
pressed a button
then we'll go to the nearest floor
that's selected by people outside the
lift the nearest one where a call button
is pressed
that should solve the problem we're not
going to have the people in the lift
staff to death anymore
okay so we code that up and we round to
our lift simulator with this particular
workload
and it works just fine and so
we deploy it to our lift and
see what happens people presumably going
to be quite happy with it
unfortunately the very next day we get
another bug report
hmm that's probably not what we expected
to happen
so we've clearly got another bug we're
going to take a little time in the lift
simulator to figure out what precisely
the workload is that causes this problem
but after a while we figure that out and
here is what happens
okay so what's happening oh
the users are messing up our algorithm
the users on floor 4 want to go to floor
1 and the use on floor 1 want to go to
floor 4 and that's fine the lift is
exactly what
it's supposed to do but unfortunately
our user on floor 3 is getting ignored
by this algorithm
um okay so we've still got a bug here
a diagnosis though for this is pretty
simple
um the lift shouldn't go past a floor
where
someone wants to go in the same
direction if we do that if we fix that
we ought to be able to fix this problem
so what are we going to do um
how about a new algorithm we'll go to
the nearest floor selected by somebody
in the lift
but we don't go past the floor where
someone wants to go in the same
direction as the lift
and if there's no one selected the
button in the lift at all
then we'll go to whatever the nearest
floor is that's selected by someone in
the lift
that surely should work i mean this will
definitely fix this problem
it will it will work won't it and so
we try it out on this workload and it
works fine on this workload and we
deploy it to
the real lift and
another day later we got another bug
report
well that's that's the same bug report
we had before but we've
fixed that problem well anyway we go
back to the lift simulator and let's see
what's going on
okay so what's happening
oh it's those users again they're
they're messing up our algorithm again
they just want to go from floor one to
floor two
and the lift algorithm does exactly that
um unfortunately it's not going as far
as floor 4 where we've got a user
so we've obviously
messed up again and this algorithm also
doesn't work
so what's wrong the diagnosis again is
pretty simple
if the lift's heading towards someone it
shouldn't turn around
and in this case the lift is turning
around when um
it gets to floor two because there's
more people waiting at floor one but it
should continue all the way up to floor
four
okay so this is going to require a new
algorithm again
so what are we going to do well
to stop it turning around we're just
going to make it go in one direction
until there's nobody else left to
service in that direction then
go back in the other direction so here's
our algorithm
we'll continue in one direction stopping
at floors
where either people outside want to go
in that direction
or people inside the lift want to stop
at that floor
okay we'll stop at either of those and
we'll change direction
only when there are no more selected
floors in the lift or no record buttons
outside the lift they'll press in that
direction then we can turn around and go
back in the other direction
so is that going to work well
tried out i live simulator and it seems
to work fine and
deployed in the real world and
no bug reports um
now it turns out that this is the actual
elevator algorithm or lift algorithm
that's used in real lift pretty much
everywhere in the world
and the interesting thing about this
algorithm is it's not
really completely obvious that this is
the right solution
um the the main thing about this
algorithm is it's really not very
optimal in terms
of the the actual median waiting time
but what it does is it guarantees that
nobody waits forever
and that's really important for an
algorithm like this um
it also turns out this algorithm is
what's used on computer hard disk for
scheduling reads from different tracks
on the disk it will keep
searching the disk head in one direction
until it reaches the end of the disk
and it will go back in the other
direction and so on sweeping backwards
and forwards across the disk and it
turns out it actually produces
not only um no starvation but also
pretty good mean access times for for
data on disks
as well as for people in lifts
so let's just watch it in action and
see how it behaves
it's pretty good i mean it's not
necessarily always the optimum algorithm
if under under every workload but it
really
is actually the important thing with
this particular algorithm
is is not that it gives the the best
median wait time
but that it actually is a fair algorithm
nobody ever
ends up waiting for an excessive amount
of time
okay so that's
a little bit of an introduction to
algorithms yeah i was taking a bit of
fun by coming up with with dumb
algorithms
um but they're not obviously dumb that's
the thing uh
now in terms of you can actually prove a
lot of things about this algorithm you
can prove that it's the best
algorithm in terms of
balancing fairness against uh
the the amount of time people actually
wait
now if you want a little bit of a
challenge
there are some extensions to this
algorithm that you might come up with
so the first challenge is what should
you do
if there's no button pressed okay
nothing selected
open effect inside lift what should the
lift do okay that's a
still got some freedom our argument
doesn't specify what that should do
and the second challenge is extend the
algorithm so it works efficiently to
control
two lifts rather than just one now
you've got
a little bit more complicated problem to
optimize now i'm not
suggesting that these are our
courseworks or anything you can choose
to do them or not if you wish
um if you put some time into thinking
about how they work maybe post some
discussion on piazza
and you can have a discussion there
about how you might extend this
algorithm in reasonable ways
okay so that's it for this week there's
the bomber coursework for you to
actually get
started with and so i'll see you next
[Music]
week
[Music]
you
